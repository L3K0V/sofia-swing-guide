package bg.lindyhop.entities;

import bg.lindyhop.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import bg.lindyhop.dao.FeedItemDao;
import bg.lindyhop.dao.FeedItemUrlDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "FEED_ITEM_URL".
 */
public class FeedItemUrl {

    private Long id;
    private String url;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FeedItemUrlDao myDao;

    private FeedItem urls;
    private Long urls__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public FeedItemUrl() {
    }

    public FeedItemUrl(Long id) {
        this.id = id;
    }

    public FeedItemUrl(Long id, String url) {
        this.id = id;
        this.url = url;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFeedItemUrlDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    /** To-one relationship, resolved on first access. */
    public FeedItem getUrls() {
        Long __key = this.feedId;
        if (urls__resolvedKey == null || !urls__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FeedItemDao targetDao = daoSession.getFeedItemDao();
            FeedItem urlsNew = targetDao.load(__key);
            synchronized (this) {
                urls = urlsNew;
            	urls__resolvedKey = __key;
            }
        }
        return urls;
    }

    public void setUrls(FeedItem urls) {
        synchronized (this) {
            this.urls = urls;
            feedId = urls == null ? null : urls.getLocalId();
            urls__resolvedKey = feedId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
