FORMAT: 1A
HOST: http://api.sofiafest.com

# sofia-swing API

Sofia-Swing is an API that allows for retrieveing information about swing dance events.


## Events [/orgs/{o_id}/events]

+ Parameters
    + o_id (number) - The organisation's id

### List all events [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "from_date": "2015-08-05T08:40:51.620Z",
                "to_date": "2015-08-10T08:40:51.620Z",
                "name": "Sofia Swing Dance Festival",
                "description": "The biggest swing dance event in Bulgaria.",
                "organiser_id": 5,
                "country_code": "BUL",
                "city": "Sofia"
            },
            
            {
                "id": 2,
                "from_date": "2015-09-05T08:40:51.620Z",
                "to_date": "2015-09-10T08:40:51.620Z",
                "name": "Veliko Tarnovo Swing Dance Festival",
                "description": "History meets dance",
                "organiser_id": 7,
                "country_code": "BUL",
                "city": "Veliko Tarnovo"
            }
        ]

### Create a new event [POST]

+ Attributes
    + from_date - Starting date of the festival
    + to_date - End date of the festival
    + name - The name of the festival
    + country_code - The country code of the hosting country
    + city - The city of the festival

+ Request (application/json)

            {
                "from_date": "2015-09-05T08:40:51.620Z",
                "to_date": "2015-09-10T08:40:51.620Z",
                "name": "Veliko Tarnovo Swing Dance Festival",
                "description": "History meets dance",
                "country_code": "BUL",
                "city": "Veliko Tarnovo"
            }

+ Response 201

    + Headers

            Location: /orgs/20/events/5


##Event [/orgs/{o_id}/events/{e_id}]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The id of the event

### Get the data for an event [GET]

+ Response 200 (application/json)

            {
                "id": 1,
                "from_date": "2015-08-05T08:40:51.620Z",
                "to_date": "2015-08-10T08:40:51.620Z",
                "name": "Sofia Swing Dance Festival",
                "description": "The biggest swing dance event in Bulgaria.",
                "organiser_id": 5,
                "country_code": "BUL",
                "city": "Sofia"
            }

### Update an event [PUT]

+ Attributes
    + from_date - Starting date of the festival
    + to_date - End date of the festival
    + name - The name of the festival
    + country_code - The country code of the hosting country
    + city - The city of the festival

+ Request (application/json)

            {
                "from_date": "2015-09-05T08:40:51.620Z",
                "to_date": "2015-09-10T08:40:51.620Z",
                "name": "Veliko Tarnovo Swing Dance Festival",
                "description": "History meets dance",
                "country_code": "BUL",
                "city": "Veliko Tarnovo"
            }

+ Response 200


### Delete an event [DELETE]
+ Response 204


## Event People [/orgs/{o_id}/events/{e_id}/people]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The id of the event

### List all people for an event [GET]

+ Response 200 (application/json)

        {
            "event_id": 20,
            "people": [
                {
                    "id": 1,
                    "user_id": 5,
                    "first_name": "Britney",
                    "last_name": "Spears"
                },
                {
                    "id": 2,
                    "user_id": 10,
                    "first_name": "Lady",
                    "last_name": "Gaga"
                },
                {
                    "id": 3,
                    "user_id": 15,
                    "first_name": "Ivan",
                    "last_name": "Ivanov"
                },
                {
                    "id": 4,
                    "user_id": 50,
                    "first_name": "Spas",
                    "last_name": "Spasov"
                }
            ]
        }

### Add a person to an event [POST]

+ Attributes
    + id (number) - The person's

+ Request (application/json)

        { "id": 5 }

+ Response 201

    + Headers
    
            Location: /orgs/1/events/20/people/30

## Event Person [/orgs/{o_id}/events/{e_id}/people/{p_id}]
+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + p_id (number) - The person's id

### Get the data for a person at an event [GET]

+ Response 200 (appplication/json)

        {
                    "id": 3,
                    "user_id": 15,
                    "first_name": "Ivan",
                    "last_name": "Ivanov"
        }
                 
### Update the event-specific data for a person [PUT]

+ Attributes
    + type - The type of the person at this event.
    
+ Request (application/json)

        {
                    "type": "STUDENT"
        }
        
+ Response 200

### Remove a person from an event [DELETE]

+ Response 204


## Tracks [/orgs/{o_id}/events/{e_id}/tracks]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id

### List all tracks for an event [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Lindy Hop",
                "type": "COUPLES",
                "levels":
                        [
                            {
                                "rank": 2,
                                "capacity": 30
                            },
                            {
                                "rank": 3,
                                "capacity": 30
                            },
                            {
                                "rank": 4,
                                "capacity": 20
                            }
                        ]
            },
            {
                "id": 2,
                "name": "Solo Jazz",
                "type": "IND",
                "levels":
                        [
                            {
                                "rank": 3,
                                "capacity": 30
                            },
                            {
                                "rank": 4,
                                "capacity": 20
                            }
                        ]
            }
        ]

### Add a new track to an event [POST]

+ Attributes
    + name - The track's name
    + type - The track's type - for couples or individuals
    + rank - The difficulty of the track.
    + capacity - The maximum number of people allowed to register for the track
    
+ Request (application/json)

        {
                "name": "Tap",
                "type": "IND",
                "levels":
                        [
                            {
                                "rank": 3,
                                "capacity": 15
                            },
                            {
                                "rank": 4,
                                "capacity": 15
                            }
                        ]
        }
        
+ Response 201

    + Headers

            Location: /orgs/20/events/5/tracks/10
            

## Track [/orgs/{o_id}/events/{e_id}/tracks/{t_id}]
+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + t_id (number) - The track's id

### Get the data for a track at an event [GET]

+ Response 200 (application/json)

        {
                "id": 1,
                "name": "Lindy Hop",
                "type": "COUPLES",
                "levels":
                        [
                            {
                                "rank": 2,
                                "capacity": 30
                            },
                            {
                                "rank": 3,
                                "capacity": 30
                            },
                            {
                                "rank": 4,
                                "capacity": 20
                            }
                        ]
        }

### Update a track at an event [PUT]

+ Attributes
    + id - The track's id
    + name - The track's name
    + type - The track's type - for couples or individuals
    + rank - The difficulty of the track.
    + capacity - The maximum number of people allowed to register for the track
    
+ Request (application/json)

        {
                "id": 10
                "name": "Tap",
                "type": "IND",
                "levels":
                        [
                            {
                                "rank": 3,
                                "capacity": 15
                            },
                            {
                                "rank": 4,
                                "capacity": 15
                            }
                        ]
        }
        
+ Response 200

### Remove a track from an event [DELETE]
+ Response 204


## Registrations [/orgs/{o_id}/events/{e_id}/registrations]
+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id

### List all registrations for an event [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "track_id": 10,
                "level_rank": 3,
                "person_id": 20,
                "role": "LEADER",
                "status": "CONFIRMED",
                "date": "2015-06-05T08:40:51.620Z"
            },
            {
                "id": 2,
                "track_id": 10,
                "level_rank": 3,
                "person_id": 25,
                "role": "FOLLOWER",
                "status": "AWAITING_PAYMENT",
                "date": "2015-06-04T08:40:51.620Z"
            }
        ]

### Add a new registration to an event [POST]

+ Attributes
    + track_id (number) - The track's id
    + level_rank (number) - The difficulty of the level
    + person_id (number) - The id of the person, who is registering
    + role - The role of the person (leader or follower)

+ Request (application/json)

        {
                "track_id": 10,
                "level_rank": 3,
                "person_id": 20,
                "role": "LEADER"
        }
        
+ Response 201

    + Headers

            Location: /orgs/20/events/5/registrations/3


## Registration [/orgs/{o_id}/events/{e_id}/registrations/{r_id}]
+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + r_id (number) - The registration's id

### Get the data for a registration [GET]

+ Response 200 (application/json)

        {
                "id": 2,
                "track_id": 10,
                "level_rank": 3,
                "person_id": 25,
                "role": "FOLLOWER",
                "status": "AWAITING_PAYMENT",
                "date": "2015-06-04T08:40:51.620Z"
        }

### Update a registration for an event [PUT]

+ Attributes
    + track_id (number) - The track's id
    + level_rank (number) - The difficulty of the level
    + person_id (number) - The id of the person, who is registering
    + role - The role of the person (leader or follower)

+ Request (application/json)

        {
                "track_id": 10,
                "level_rank": 3,
                "person_id": 20,
                "role": "LEADER"
        }
        
+ Response 200

### Delete a registration for an event [DELETE]
+ Response 204


## Waiting List [/orgs/{o_id}/events/{e_id}/waitinglist{?t_id}{?level_rank}]
+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + t_id (number, optional) - The tracks's id
    + level_rank (number, optional) - The difficulty of the level

### List all the entries in the waiting list for a track at an event [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "registration_id": 10,
                "person_id": 20,
                "role": "LEADER",
                "level_rank": 3,
                "date": "2015-06-04T08:40:51.620Z"
            },
            {
                "id": 2,
                "registration_id": 12,
                "person_id": 25,
                "role": "FOLLOWER",
                "level_rank": 3,
                "date": "2015-04-04T08:40:51.620Z"
            }
        ]

### Add a new entry to the waiting list for a track at an event [POST]

+ Attributes
    + registration_id - The registration's id
    
+ Request (application/json)

        { "registration_id": 1 }
        
+ Response 201

    + Headers
            
            Location: /orgs/20/events/5/tracks/3/waitinglist/10
            

## Waiting List Etry [/orgs/{o_id}/events/{e_id}/waitinglist/{w_id}]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + w_id (number) - The waiting list entry's id

### Get the data for a waiting list entry at an event [GET]

+ Response 200 (application/json)

        {
                "id": 2,
                "registration_id": 12,
                "person_id": 25,
                "role": "FOLLOWER",
                "level_rank": 3,
                "date": "2015-04-04T08:40:51.620Z"
        }