FORMAT: 1A
HOST: http://api.sofiafest.com

# sofia-swing API

Sofia-Swing is an API that allows for retrieveing information about swing dance events.


## Events [/orgs/{o_id}/events]

+ Parameters
    + o_id (number) - The organisation's id

### List all events [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "from_date": "2015-08-05T08:40:51.620Z",
                "to_date": "2015-08-10T08:40:51.620Z",
                "name": "Sofia Swing Dance Festival",
                "description": "The biggest swing dance event in Bulgaria.",
                "organiser_id": 5,
                "country_code": "BUL",
                "city": "Sofia"
            },
            
            {
                "id": 2,
                "from_date": "2015-09-05T08:40:51.620Z",
                "to_date": "2015-09-10T08:40:51.620Z",
                "name": "Veliko Tarnovo Swing Dance Festival",
                "description": "History meets dance",
                "organiser_id": 7,
                "country_code": "BUL",
                "city": "Veliko Tarnovo"
            }
        ]

### Create a new event [POST]

+ Attributes
    + from_date - Starting date of the festival
    + to_date - End date of the festival
    + name - The name of the festival
    + country_code - The country code of the hosting country
    + city - The city of the festival

+ Request (application/json)

            {
                "from_date": "2015-09-05T08:40:51.620Z",
                "to_date": "2015-09-10T08:40:51.620Z",
                "name": "Veliko Tarnovo Swing Dance Festival",
                "description": "History meets dance",
                "country_code": "BUL",
                "city": "Veliko Tarnovo"
            }

+ Response 201

    + Headers

            Location: /orgs/20/events/5


##Event [/orgs/{o_id}/events/{e_id}]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The id of the event

### Get the data for an event [GET]

+ Response 200 (application/json)

            {
                "id": 1,
                "from_date": "2015-08-05T08:40:51.620Z",
                "to_date": "2015-08-10T08:40:51.620Z",
                "name": "Sofia Swing Dance Festival",
                "description": "The biggest swing dance event in Bulgaria.",
                "organiser_id": 5,
                "country_code": "BUL",
                "city": "Sofia"
            }

### Update an event [PUT]

+ Attributes
    + from_date - Starting date of the festival
    + to_date - End date of the festival
    + name - The name of the festival
    + country_code - The country code of the hosting country
    + city - The city of the festival

+ Request (application/json)

            {
                "from_date": "2015-09-05T08:40:51.620Z",
                "to_date": "2015-09-10T08:40:51.620Z",
                "name": "Veliko Tarnovo Swing Dance Festival",
                "description": "History meets dance",
                "country_code": "BUL",
                "city": "Veliko Tarnovo"
            }

+ Response 200


### Delete an event [DELETE]
+ Response 204


## Event People [/orgs/{o_id}/events/{e_id}/people]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The id of the event

### List all people for an event [GET]

+ Response 200 (application/json)

        {
            "event_id": 20,
            "people": [
                {
                    "id": 1,
                    "user_id": 5,
                    "first_name": "Britney",
                    "last_name": "Spears"
                },
                {
                    "id": 2,
                    "user_id": 10,
                    "first_name": "Lady",
                    "last_name": "Gaga"
                },
                {
                    "id": 3,
                    "user_id": 15,
                    "first_name": "Ivan",
                    "last_name": "Ivanov"
                },
                {
                    "id": 4,
                    "user_id": 50,
                    "first_name": "Spas",
                    "last_name": "Spasov"
                }
            ]
        }

### Add a person to an event [POST]

+ Attributes
    + id (number) - The person's

+ Request (application/json)

        { "id": 5 }

+ Response 201

    + Headers
    
            Location: /orgs/1/events/20/people/30

## Event Person [/orgs/{o_id}/events/{e_id}/people/{p_id}]
+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + p_id (number) - The person's id

### Get the data for a person at an event [GET]

+ Response 200 (appplication/json)

        {
                    "id": 3,
                    "user_id": 15,
                    "first_name": "Ivan",
                    "last_name": "Ivanov"
        }
                 
### Update the event-specific data for a person [PUT]

+ Attributes
    + type - The type of the person at this event.
    
+ Request (application/json)

        {
                    "type": "STUDENT"
        }
        
+ Response 200

### Remove a person from an event [DELETE]

+ Response 204


## Tracks [/orgs/{o_id}/events/{e_id}/tracks]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id

### List all tracks for an event [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Lindy Hop",
                "type": "COUPLES",
                "levels":
                        [
                            {
                                "rank": 2,
                                "capacity": 30
                            },
                            {
                                "rank": 3,
                                "capacity": 30
                            },
                            {
                                "rank": 4,
                                "capacity": 20
                            }
                        ]
            },
            {
                "id": 2,
                "name": "Solo Jazz",
                "type": "IND",
                "levels":
                        [
                            {
                                "rank": 3,
                                "capacity": 30
                            },
                            {
                                "rank": 4,
                                "capacity": 20
                            }
                        ]
            }
        ]

### Add a new track to an event [POST]

+ Attributes
    + name - The track's name
    + type - The track's type - for couples or individuals
    + rank - The difficulty of the track.
    + capacity - The maximum number of people allowed to register for the track
    
+ Request (application/json)

        {
                "name": "Tap",
                "type": "IND",
                "levels":
                        [
                            {
                                "rank": 3,
                                "capacity": 15
                            },
                            {
                                "rank": 4,
                                "capacity": 15
                            }
                        ]
        }
        
+ Response 201

    + Headers

            Location: /orgs/20/events/5/tracks/10
            

## Track [/orgs/{o_id}/events/{e_id}/tracks/{t_id}]
+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + t_id (number) - The track's id

### Get the data for a track at an event [GET]

+ Response 200 (application/json)

        {
                "id": 1,
                "name": "Lindy Hop",
                "type": "COUPLES",
                "levels":
                        [
                            {
                                "rank": 2,
                                "capacity": 30
                            },
                            {
                                "rank": 3,
                                "capacity": 30
                            },
                            {
                                "rank": 4,
                                "capacity": 20
                            }
                        ]
        }

### Update a track at an event [PUT]

+ Attributes
    + id - The track's id
    + name - The track's name
    + type - The track's type - for couples or individuals
    + rank - The difficulty of the track.
    + capacity - The maximum number of people allowed to register for the track
    
+ Request (application/json)

        {
                "id": 10
                "name": "Tap",
                "type": "IND",
                "levels":
                        [
                            {
                                "rank": 3,
                                "capacity": 15
                            },
                            {
                                "rank": 4,
                                "capacity": 15
                            }
                        ]
        }
        
+ Response 200

### Remove a track from an event [DELETE]
+ Response 204


## Registrations [/orgs/{o_id}/events/{e_id}/registrations]
+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id

### List all registrations for an event [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "track_id": 10,
                "level_rank": 3,
                "person_id": 20,
                "role": "LEADER",
                "status": "CONFIRMED",
                "date": "2015-06-05T08:40:51.620Z"
            },
            {
                "id": 2,
                "track_id": 10,
                "level_rank": 3,
                "person_id": 25,
                "role": "FOLLOWER",
                "status": "AWAITING_PAYMENT",
                "date": "2015-06-04T08:40:51.620Z"
            }
        ]

### Add a new registration to an event [POST]

+ Attributes
    + track_id (number) - The track's id
    + level_rank (number) - The difficulty of the level
    + person_id (number) - The id of the person, who is registering
    + role - The role of the person (leader or follower)

+ Request (application/json)

        {
                "track_id": 10,
                "level_rank": 3,
                "person_id": 20,
                "role": "LEADER"
        }
        
+ Response 201

    + Headers

            Location: /orgs/20/events/5/registrations/3


## Registration [/orgs/{o_id}/events/{e_id}/registrations/{r_id}]
+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + r_id (number) - The registration's id

### Get the data for a registration [GET]

+ Response 200 (application/json)

        {
                "id": 2,
                "track_id": 10,
                "level_rank": 3,
                "person_id": 25,
                "role": "FOLLOWER",
                "status": "AWAITING_PAYMENT",
                "date": "2015-06-04T08:40:51.620Z"
        }

### Update a registration for an event [PUT]

+ Attributes
    + track_id (number) - The track's id
    + level_rank (number) - The difficulty of the level
    + person_id (number) - The id of the person, who is registering
    + role - The role of the person (leader or follower)

+ Request (application/json)

        {
                "track_id": 10,
                "level_rank": 3,
                "person_id": 20,
                "role": "LEADER"
        }
        
+ Response 200

### Delete a registration for an event [DELETE]
+ Response 204


## Waiting List [/orgs/{o_id}/events/{e_id}/waitinglist{?t_id}{?level_rank}]
+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + t_id (number, optional) - The tracks's id
    + level_rank (number, optional) - The difficulty of the level

### List all the entries in the waiting list for a track at an event [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "registration_id": 10,
                "person_id": 20,
                "role": "LEADER",
                "level_rank": 3,
                "date": "2015-06-04T08:40:51.620Z"
            },
            {
                "id": 2,
                "registration_id": 12,
                "person_id": 25,
                "role": "FOLLOWER",
                "level_rank": 3,
                "date": "2015-04-04T08:40:51.620Z"
            }
        ]

### Add a new entry to the waiting list for a track at an event [POST]

+ Attributes
    + registration_id - The registration's id
    
+ Request (application/json)

        { "registration_id": 1 }
        
+ Response 201

    + Headers
            
            Location: /orgs/20/events/5/tracks/3/waitinglist/10
            

## Waiting List Entry [/orgs/{o_id}/events/{e_id}/waitinglist/{w_id}]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + w_id (number) - The waiting list entry's id

### Get the data for a waiting list entry at an event [GET]

+ Response 200 (application/json)

        {
                "id": 2,
                "registration_id": 12,
                "person_id": 25,
                "role": "FOLLOWER",
                "level_rank": 3,
                "date": "2015-04-04T08:40:51.620Z"
        }
        
### Remove an entry from the waiting list [DELETE]
+ Response 204


## Posts [/orgs/{o_id}/events/{e_id}/posts{?person_id}]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + person_id (number, optional) - The peron's id, for whom to retrieve UNREAD status
### List all posts for an event [GET]

+ Response 200 (application/json)

        [
                {
                    "serverId": 1,
                    "title": "Dax and Sarah 2015",
                    "text": "Dax and Sarah are our next superstart couple.",
                    "urls": "http://example1.com;http://example2.com",
                    "unread": true
                    "updatedAt": "2015-12-23"
                },
                {
                    "serverId": 2,
                    "title": "Hot Sugar Band 2014",
                    "text": "The amazing hot sugar band are coming to Sofia.",
                    "urls": "http://example1.com;http://example2.com",
                    "unread": false
                    "updatedAt": "2014-12-23"
                },
                {
                    "serverId": 3,
                    "title": "Felipe and Alice 2016",
                    "text": "The amazing hot sugar band are coming to Sofia.",
                    "urls": "http://example1.com;http://example2.com",
                    "unread": false
                    "updatedAt": "2016-12-23"
                }
        ]

### Add a new post to an event [POST]

+ Attributes
    + title - The post's title
    + text - The post's content
    + urls - The URLs, referenced in the post
    
+ Request (application/json)

        {
                    "title": "Next teaching couple",
                    "text": "Dax and Sarah are our next superstart couple.",
                    "urls": "http://example1.com;http://example2.com"
        }
        
+ Response 201

    + Headers
        
            Loction: /orgs/20/events/5/posts/1
        
## Post [/orgs/{o_id}/events/{e_id}/posts/{p_id}{?person_id}]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + p_id (number) - The post's id
    + person_id (number, optional) - The peron's id, for whom to retrieve UNREAD status

### Get the data for a post at an event [GET]

+ Response 200 (application/json)

        {
                    "id": 2,
                    "title": "Hot Sugar Band are coming",
                    "text": "The amazing hot sugar band are coming to Sofia.",
                    "urls": "http://example1.com;http://example2.com",
                    "unread": false
        }
        
### Update the data for a post at an event [PUT]

+ Attributes
    + title - The post's title
    + text - The post's content
    + urls - The URLs, referenced in the post
    + unread - The UNREAD status of the post for the given person
    
+ Request (application/json)

        {
                    "title": "Hot Sugar Band are coming",
                    "text": "The amazing hot sugar band are coming to Sofia.",
                    "urls": "http://example1.com;http://example2.com",
                    "unread": true
        }
        
+ Response 200

### Delete a post for an event [DELETE]
+ Response 204


## Competitions [/orgs/{o_id}/events/{e_id}/competitions]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id

### List all competitions for an event [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Strictly Lindy",
                "type": "COUPLES",
                "description": "Registrations accepted as couples only."
                "photo": "...binary data for the photo..."
            },
            {
                "id": 2,
                "name": "Jack & Jill",
                "type": "COUPLES",
                "description": "Individual registrations accepted."
                "photo": "...binary data for the photo..."
            }
        ]

### Add a new competition to an event [POST]

+ Attributes
    + name - The competition's name
    + type - The competition's type
    + description - Additional information for the competition
    + photo - Photo for the competition entry
    
+ Request (application/json)

        {
                "name": "Solo Jazz",
                "type": "IND",
                "description": "Individual registrations accepted"
                "photo": "...binary data for the photo..."
        }

+ Response 201

    + Headers
    
            Location: /orgs/20/events/5/competitions/3
   
            
## Competition [/orgs/{o_id}/events/{e_id}/competitions/{c_id}]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + c_id (number) - The competition's id

### Get the data for a competition at an event [GET]

+ Response 200 (application/json)

        {
                "id": 3
                "name": "Solo Jazz",
                "type": "IND",
                "description": "Individual registrations accepted"
                "photo": "...binary data for the photo..."
        }
        
### Update a competition at an event [PUT]

+ Attributes
    + name - The competition's name
    + type - The competition's type
    + description - Additional info for the competition
    + photo - Photo for the competition
    
+ Request (application/json)

        {
                "name": "Solo Jazz",
                "type": "IND",
                "description": "Individual registrations accepted"
                "photo": "...binary data for the photo..."
        }
        
+ Response 200

### Remove a competition from an event [DELETE]
+ Response 204


## Guide [/orgs/{o_id}/events/{e_id}/guide]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id

### List all guide items for an event [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "NDK",
                "lat": 42.690297,
                "lon": 23.311744,
                "info": "This is where the workshops will take place.",
                "opening_hours": ["09:00-12:00", "13:00-19:00"]
            },
            {
                "id": 2,
                "name": "Bar Alcohol",
                "lat": 42.690297,
                "lon": 23.321744,
                "info": "This is where the parties will take place.",
                "opening_hours": ["19:00-03:00"]
            }
        ]


### Add a new guide item to an event [POST]

+ Attributes
    + name - The name of the place.
    + lat (number) - The latitude of the location
    + lon (number) - The longitude of the location
    + info - Additional info for the place
    + opening_hours - When does the place is open

+ Request (application/json)

        {
                "name": "NDK",
                "lat": 42.690297,
                "lon": 23.311744,
                "info": "This is where the workshops will take place.",
                "opening_hours": ["09:00-12:00", "13:00-19:00"]
        }
        
+ Response 201

    + Headers
            
            Location: /orgs/20/events/5/tracks/3/waitinglist/10


## Guide Item [/orgs/{o_id}/events/{e_id}/guide/{g_id}]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + g_id (number) - The guide item's id

### Get the data for a guide item at an event [GET]

+ Response 200 (application/json)

        {
                "id": 1,
                "name": "NDK",
                "lat": 42.690297,
                "lon": 23.311744,
                "info": "This is where the workshops will take place.",
                "opening_hours": ["09:00-12:00", "13:00-19:00"]
        }
        
### Update a guide item [PUT]

+ Attributes
    + name - The name of the place.
    + lat (number) - The latitude of the location
    + lon (number) - The longitude of the location
    + info - Additional info for the place
    + opening_hours - When does the place is open
    
+ Request (appliation/json)

        {
                "name": "NDK",
                "lat": 42.690297,
                "lon": 23.311744,
                "info": "This is where the workshops will take place.",
                "opening_hours": ["09:00-12:00", "13:00-19:00"]
        }
        
+ Response 200

### Remove a guide item from an event [DELETE]
+ Response 204


## Schedule [/orgs/{o_id}/events/{e_id}/schedule]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id

### List all schedule items for an event [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "type": "CLASS",
                "hours": "10:00-11:00",
                "level": "INT",
                "track": "Lindy Hop",
                "people": ["Dax Hock", "Sarah Breck"]
            },
            {
                "id": 1,
                "type": "PARTY",
                "hours": "09:00-03:00"
            }
        ]
        
### Add a new schedule item for an event [POST]

+ Attributes
    + type - The type of the item (class, party, etc...)
    + hours - The time interval for the item.
    + level - The level of the item if it is a class
    + track - The track of the item if it is a class
    + people - The hosts of the item (if it is a class, these are the teachers)
    
+ Request (application/json)

        {
                "type": "CLASS",
                "hours": "10:00-11:00",
                "level": "ADV",
                "track": "Lindy Hop",
                "people": ["Yavor Kunchev", "Lilia Zla"]
        }
    
+ Response 201

    + Headers
            
            Location: /orgs/20/events/5/tracks/3/schedule/3


## Schedule Item [/orgs/{o_id}/events/{e_id}/schedule/{s_id}]

+ Parameters
    + o_id (number) - The organisation's id
    + e_id (number) - The event's id
    + s_id (number) - The schedule item's id

### Get the info for a schedule item [GET]

+ Response 200 (application/json)

        {
                "id": 1,
                "type": "CLASS",
                "hours": "10:00-11:00",
                "level": "INT",
                "track": "Lindy Hop",
                "people": ["Dax Hock", "Sarah Breck"]
        }

### Update a schedule item [PUT]

+ Attributes
    + type - The type of the item (class, party, etc...)
    + hours - The time interval for the item.
    + level - The level of the item if it is a class
    + track - The track of the item if it is a class
    + people - The hosts of the item (if it is a class, these are the teachers)
    
+ Request (application/json)

        {
                "type": "CLASS",
                "hours": "10:00-11:00",
                "level": "INT",
                "track": "Lindy Hop",
                "people": ["Dax Hock", "Sarah Breck"]
        }

+ Response 200

### Delete a schedule item [DELETE]
+ Response 204


## Users [/users]

### List all users [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "username": "miro",
                "first_name": "Miroslav",
                "last_name": "Mironov",
                "email": "mm@mm.mm",
                "country_code": "BG"
            },
            {
                "id": 2,
                "username": "asencho",
                "first_name": "Asen",
                "last_name": "Lekov",
                "email": "al@al.al",
                "country_code": "BG"
            }
        ]

### Add a new user [POST]

+ Attributes
    + username - The user's username
    + first_name - The user's first name
    + last_name - The user's last name
    + email - The user's email
    + country_code - The user's home country county code
    
+ Request (application/json)

        {
            "username": "mladencho",
            "first_name": "Mladen",
            "last_name": "Raev",
            "email": "mr@mr.mr",
            "country_code": "BG"
        }
        
+ Response 201

    + Headers
            
            Location: /users/3


## User [/users/{u_id}]

+ Parameters
    + u_id - The user's id

### Get the user's data [GET]

+ Response 200 (application/json)

        {
            "id": 2,
            "username": "asencho",
            "first_name": "Asen",
            "last_name": "Lekov",
            "email": "al@al.al",
            "country_code": "BG"
        }
        
### Update the user's data [PUT]

+ Attributes
    + username - The user's username
    + first_name - The user's first name
    + last_name - The user's last name
    + email - The user's email
    + country_code - The user's home country county code
    
+ Response 200

### Delete a user [DELETE]
+ Response 204